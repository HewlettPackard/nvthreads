===========================================================================

	      The Hoard Multiprocessor Memory Allocator
			 http://www.hoard.org

			   by Emery Berger
 		 http://www.cs.utexas.edu/users/emery

  Copyright (c) 1998 - 2001, The University of Texas at Austin.

---------------------------------------------------------------------------
emery@cs.utexas.edu                | <http://www.cs.utexas.edu/users/emery>
Department of Computer Sciences    |             <http://www.cs.utexas.edu>
University of Texas at Austin      |                <http://www.utexas.edu>
===========================================================================


What's Hoard?
-------------

The Hoard memory allocator is a fast, scalable, and memory-efficient
memory allocator for shared-memory multiprocessors.

Why Hoard?
----------

Multithreaded programs that perform dynamic memory allocation do not
scale because the heap is a bottleneck. When multiple threads
simultaneously allocate or deallocate memory from the heap, they will
be serialized while waiting for the heap lock. Programs making
intensive use of the heap actually slow down as the number of
processors increases. (Note: If you make a lot of use of the STL, you
may not know it, but you are making a lot of use of the heap.)

Hoard is a fast allocator that solves this problem. In addition, it
has very reasonable bounds on memory consumption.


How do I use it?
----------------

Using Hoard is easy. It is written to work on any variant of UNIX that
supports pthreads, and should compile out of the box using make.  See
INSTALL for more details.

NOTE:
If you're using Windows, please read the NOTES.Windows file.

You can build Hoard in one of two ways (see INSTALL). Below, I assume
you used the configure script.

To link Hoard with the program foo (after doing "make install"):

	Linux:
	  g++ foo.o -L/usr/local/lib -lhoard -lpthread -o foo

	Solaris:
	  g++ foo.o -L/usr/local/lib -lhoard -lthread -lrt -o foo

You *must* add "-lpthread" or "-lthread" to your list of libraries
(except if you're using the sproc library on the SGI). Don't forget to
add /usr/local/lib to your LD_LIBRARY_PATH environment variable.

In UNIX, you might be able to avoid relinking your application and use
Hoard just by changing the environment variable LD_PRELOAD, as in

	setenv LD_PRELOAD "/lib/libpthread.so.0 /usr/local/lib/libhoard.so"

For Solaris, use
	setenv LD_PRELOAD "/usr/lib/libthread.so /usr/local/lib/libhoard.so"

This trick won't work for applications compiled with the "-static" option.

More information
----------------

For more information on Hoard, along with some nice performance graphs, see

	Hoard: A Scalable Memory Allocator for Multithreaded Applications
	ASPLOS-IX
	Emery Berger, Kathryn McKinley, Paul Wilson, Robert Blumofe

	(Included in this distribution in docs/ASPLOS2000.pdf.gz)

The latest version of Hoard will always be available from the Hoard web page:

	<http://www.hoard.org>


Feedback
--------

Please send any bug reports and information about new platforms Hoard
has been built on to emery@cs.utexas.edu.


Mailing lists
-------------

There are two mailing lists for Hoard:

	hoard-announce@yahoogroups.com: a low-volume mailing list for
	announcements of new releases of Hoard. Only I can post to this list.

	hoard@yahoogroups.com: a mailing list for Hoard-related discussions.
	Any member of the mailing list may post to it.

To subscribe, go to the Hoard home page (www.hoard.org) and enter your
e-mail address in the appropriate box, or just send a message to the
mailing list address to get further instructions on subscribing.

--
Emery Berger
emery@cs.utexas.edu
www.cs.utexas.edu/users/emery


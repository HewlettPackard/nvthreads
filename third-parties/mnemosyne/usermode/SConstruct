import os
from library.configuration import mnemosyne

AddOption('--build-example',
           action="store", dest='selected_example',
           type='string',
           metavar='NAME',
           help='build this example')
AddOption('--build-bench',
           action="store", dest='selected_bench',
           type='string',
           metavar='NAME',
           help='build this example')
AddOption("--no-build-debug",
           action="store_false", dest="build_debug", 
           default = True,
           help="build library with debug info [default]")
AddOption("--build-debug",
           action="store_true", dest="build_debug", 
           default = True,
           help="build library with debug info [default]")
AddOption("--build-stats",
           action="store_true", dest="build_stats", 
           default = False,
           help="build library with profiling support [default]")
AddOption("--build-ubench",
           action="store_true", dest="build_ubench", 
           default = False,
           help="build microbenchmarks")
AddOption('--config-name',
           action="store", dest='config_name',
           type='string',
           metavar='NAME',
           help='build using this configuration')
AddOption("--linkage",
          action="store", dest="linkage", 
          type="choice", choices=["dynamic", "static"],
          default = "dynamic",
          help="library linkage: dynamic, static [default: %default]")
AddOption("--test",
           action="store_true", dest="run_tests", 
           default = False,
           help="run tests")
AddOption('--test-filter',
           action="store", dest='test_filter',
           type='string',
           metavar='NAME',
           help='a regular expression used to match tests to run')

# Custom help message. Overrides the help output of the local options.
Help("""
Type: 'scons' to build the libraries.
      'scons check' to build and run unit tests.
""")

# Ugly hack to extract the optparse help output for my local options and add 
# it to our custom help text.
import SCons.Script.Main as main
help_lines = main.OptionsParser.format_help().split('\n')
count = 0
for help_line in help_lines:
	count = count+1
	if help_line == "Local Options:":
		break

option_help = '\n'.join(help_lines[count-1:])
Help(option_help)

mainEnv = mnemosyne.Environment(None)
mainEnv['BUILD_LINKAGE'] = GetOption('linkage')
mainEnv['BUILD_DEBUG'] = GetOption('build_debug')
mainEnv['BUILD_STATS'] = GetOption('build_stats')
mainEnv['BUILD_UBENCH'] = GetOption('build_ubench')
mainEnv['BUILD_EXAMPLE'] = GetOption('selected_example')
mainEnv['BUILD_BENCH'] = GetOption('selected_bench')
mainEnv['BUILD_CONFIG_NAME'] = GetOption('config_name')
if mainEnv['BUILD_CONFIG_NAME'] is None:
	mainEnv['BUILD_CONFIG_NAME'] = 'default'
mainEnv['TEST_FILTER'] = GetOption('test_filter')

rootDir = os.getcwd()
mainEnv['MY_ROOT_DIR'] = rootDir
mainEnv['MY_LINKER_DIR'] = os.path.join(rootDir, 'tool/linker')

mainEnv['ICC_DIR'] = '/opt/intel/Compiler/11.0/606/'

#mainEnv['CC'] = os.path.join(mainEnv['ICC_DIR'], 'bin/intel64/icc')
mainEnv['CC'] = os.path.join(mainEnv['ICC_DIR'], '/home/hsuchi/intel/Compiler/11.0/606/bin/intel64/icc')
#mainEnv['CXX'] = os.path.join(mainEnv['ICC_DIR'],  'bin/intel64/icpc')
mainEnv['CXX'] = os.path.join(mainEnv['ICC_DIR'],  '/home/hsuchi/intel/Compiler/11.0/606/bin/intel64/icpc')


Export('mainEnv')

CommonObjects = SConscript('library/common/SConscript', variant_dir = 'build/library/common')
pmallocLibrary = SConscript('library/pmalloc/SConscript', 'CommonObjects', variant_dir = 'build/library/pmalloc')
mcoreLibrary = SConscript('library/mcore/SConscript', 'CommonObjects', variant_dir = 'build/library/mcore')
mtmLibrary = SConscript('library/mtm/SConscript', variant_dir = 'build/library/mtm')

toolsEnv = mainEnv.Clone()
toolsEnv['CPPPATH'] = ['#library/mcore/include', '#library/mtm/include']
Export('toolsEnv')
Export('mcoreLibrary', 'pmallocLibrary', 'mtmLibrary')
SConscript('tool/SConscript', variant_dir = os.path.join('build', 'tool'))

# Explicit dependencies that were built outside SCons
mainEnv['EXPLICIT_DEPENDENCY'] = {}
mainEnv['EXPLICIT_DEPENDENCY']['BDB_LIB'] = os.path.join(rootDir, 'bench/kvstore/bdb/build_unix/libdb.a')
mainEnv['EXPLICIT_DEPENDENCY']['BDB_INCLUDE'] = os.path.join(rootDir, 'bench/kvstore/bdb/build_unix/')

mainEnv['EXPLICIT_DEPENDENCY']['TC_BASE_LIB'] = os.path.join(rootDir, 'bench/kvstore/tc/library-base/libtokyocabinet.a')
mainEnv['EXPLICIT_DEPENDENCY']['TC_BASE_INCLUDE'] = os.path.join(rootDir, 'bench/kvstore/tc/library-base')
mainEnv['EXPLICIT_DEPENDENCY']['TC_MTM_LIB'] = os.path.join(rootDir, 'bench/kvstore/tc/library-mtm/libtokyocabinet.a')
mainEnv['EXPLICIT_DEPENDENCY']['TC_MTM_INCLUDE'] = os.path.join(rootDir, 'bench/kvstore/tc/library-mtm')

if mainEnv['BUILD_EXAMPLE'] != None:
	examplesEnv = mainEnv.Clone()
	examplesEnv['CPPPATH'] = ['#library/mcore/include', '#library/mtm/include']
	Export('examplesEnv')
	Export('mcoreLibrary', 'pmallocLibrary', 'mtmLibrary')
	SConscript('examples/SConscript', variant_dir = os.path.join('build', 'examples'))

if mainEnv['BUILD_BENCH'] != None:
	benchEnv = mainEnv.Clone()
	benchEnv['CPPPATH'] = ['#library/mcore/include', '#library/mtm/include']
	Export('benchEnv')
	Export('mcoreLibrary', 'pmallocLibrary', 'mtmLibrary')
	SConscript('bench/SConscript', variant_dir = os.path.join('build', 'bench'))

if mainEnv['BUILD_UBENCH'] == True:
	ubenchEnv = mainEnv.Clone()
	ubenchEnv['CPPPATH'] = ['#library/mcore/include', '#library/mtm/include']
	Export('ubenchEnv')
	Export('mcoreLibrary', 'pmallocLibrary', 'mtmLibrary')
	SConscript('bench/ubench/SConscript', variant_dir = os.path.join('build', 'bench', 'ubench'))

if GetOption('run_tests') == True:
	if mainEnv['TEST_FILTER'] is None:
		mainEnv['TEST_FILTER'] = ".*"
	Export('mcoreLibrary', 'pmallocLibrary', 'mtmLibrary')
	SConscript('test/SConscript', variant_dir = os.path.join('build', 'test'))
